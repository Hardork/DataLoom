name: Build and Deploy Docker Images

on: push

jobs:
  build-and-deploy:
    if: contains(github.event.head_commit.message, '#deploy') # 检查提交信息是否包含指定关键词'#deploy'
    runs-on: ubuntu-latest

    env:
      SERVER_HOST: ${{ secrets.SERVER_HOST }}         # 远程服务器地址
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }} # SSH 密钥，用于连接服务器
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }} # Docker 仓库用户名
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }} # Docker 仓库密码

    steps:
      # Step 1: 检出代码
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: 设置 Java 环境
      - name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-version: '1.8'

#      - name: Dependies Cache
#        uses: actions/cache@v2
#        with:

      # Step 3: 使用 Maven 打包整个项目
      - name: Build all modules
        run: mvn clean package -DskipTests

      # Step 4: 登录 DockerHub（或其他容器注册表）
      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step 5: 构建并推送 admin-backend 镜像
      - name: Build and Push admin-backend Docker image
        run: |
          docker build -t $DOCKER_USERNAME/admin-backend:latest -f ./admin-backend/Dockerfile .
          docker push $DOCKER_USERNAME/admin-backend:latest

      # Step 6: 构建并推送 gateway 镜像
      - name: Build and Push gateway Docker image
        run: |
          docker build -t $DOCKER_USERNAME/gateway:latest -f ./gateway/Dockerfile .
          docker push $DOCKER_USERNAME/gateway:latest

      # Step 7: 构建并推送 points-service 镜像
      - name: Build and Push points-service Docker image
        run: |
          docker build -t $DOCKER_USERNAME/points-service:latest -f ./points-service/Dockerfile .
          docker push $DOCKER_USERNAME/points-service:latest

      # Step 8: 部署到远程服务器
      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ env.SERVER_HOST }}
          username: root
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            docker pull $DOCKER_USERNAME/admin-backend:latest
            docker pull $DOCKER_USERNAME/gateway:latest
            docker pull $DOCKER_USERNAME/points-service:latest
            docker stop admin-backend || true && docker rm admin-backend || true
            docker stop gateway || true && docker rm gateway || true
            docker stop points-service || true && docker rm points-service || true
            docker run -d --name admin-backend -p 8081:8081 $DOCKER_USERNAME/admin-backend:latest
            docker run -d --name gateway -p 8090:8090 $DOCKER_USERNAME/gateway:latest
            docker run -d --name points-service -p 8082:8082 $DOCKER_USERNAME/points-service:latest